{"version":3,"sources":["logo.svg","Draftjs Tutuorial/ViewSource.js","Draftjs Tutuorial/Draft.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ViewSource","props","addHTML","setState","showmodal","state","savechanges","value","editorState","onChange","contentBlock","htmlToDraft","console","log","contentState","Modifier","replaceText","getCurrentContent","getSelection","getCurrentInlineStyle","EditorState","push","Fragment","onClick","this","Modal","show","onHide","style","position","maxWidth","width","Header","closeButton","Title","Body","id","height","draftToHtml","convertToRaw","Footer","Button","variant","$","prop","Component","Draft","setEditorState","createEmpty","onEditorStateChange","wrapperClassName","editorClassName","toolbarCustomButtons","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,oQCqE5BC,EA7Df,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,QAAU,WACR,EAAKC,SAAS,CAAEC,WAAY,EAAKC,MAAMD,aAPtB,EASnBE,YAAc,SAAAC,GAAU,IAAD,EACa,EAAKN,MAA/BO,EADa,EACbA,YAAaC,EADA,EACAA,SACfC,EAAeC,IAAYJ,GACjCK,QAAQC,IAAIH,GACZ,IAAMI,EAAeC,WAASC,YAC5BR,EAAYS,oBACZT,EAAYU,eACZP,IAAYJ,GACZC,EAAYW,yBAEdV,EAASW,cAAYC,KAAKb,EAAaM,EAAc,sBACrD,EAAKX,SAAS,CAAEC,WAAY,EAAKC,MAAMD,aAjBvC,EAAKC,MAAQ,CAAED,WAAW,GAHT,EADrB,qDAuBY,IAAD,OACP,OACE,kBAAC,IAAMkB,SAAP,KACE,yBAAKC,QAASC,KAAKtB,SAAnB,YACA,kBAACuB,EAAA,EAAD,CACEC,KAAMF,KAAKnB,MAAMD,UACjBuB,OAAQH,KAAKtB,QACb0B,MAAO,CAAEC,SAAU,WAAYC,SAAU,OAAQC,MAAO,SAExD,kBAACN,EAAA,EAAMO,OAAP,CAAcC,aAAW,GACvB,kBAACR,EAAA,EAAMS,MAAP,uBAEF,kBAACT,EAAA,EAAMU,KAAP,KACE,8BACEC,GAAG,WACHR,MAAO,CAAEG,MAAO,OAAQM,OAAQ,QAChC9B,MAAO+B,IACLC,uBAAaf,KAAKvB,MAAMO,YAAYS,yBAI1C,kBAACQ,EAAA,EAAMe,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYnB,QAASC,KAAKtB,SAA1C,SAGA,kBAACuC,EAAA,EAAD,CACEC,QAAQ,UACRnB,QAAS,kBAAM,EAAKjB,YAAYqC,IAAE,aAAaC,KAAK,YAFtD,uBAhDZ,GAAgCC,aCuBjBC,EA1Bf,kDACE,WAAY7C,GAAQ,IAAD,8BACjB,cAAMA,IAKR8C,eAAiB,SAAAvC,GACf,EAAKL,SAAS,CAAEK,iBALhB,EAAKH,MAAQ,CACXG,YAAaY,cAAY4B,eAHV,EADrB,qDAYI,OACE,6BACE,kBAAC,SAAD,CACExC,YAAagB,KAAKnB,MAAMG,YACxByC,oBAAqBzB,KAAKuB,eAC1BG,iBAAiB,eACjBC,gBAAgB,cAChBC,qBAAsB,CAAC,kBAAC,EAAD,cAnBjC,GAA2BP,aCQZQ,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.b97607c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { EditorState, Modifier, convertToRaw, ContentState } from \"draft-js\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport draftToHtml from \"draftjs-to-html\";\r\nimport htmlToDraft from \"html-to-draftjs\";\r\nimport $ from \"jquery\";\r\nexport class ViewSource extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { showmodal: false };\r\n  }\r\n\r\n  addHTML = () => {\r\n    this.setState({ showmodal: !this.state.showmodal });\r\n  };\r\n  savechanges = value => {\r\n    const { editorState, onChange } = this.props;\r\n    const contentBlock = htmlToDraft(value);\r\n    console.log(contentBlock);\r\n    const contentState = Modifier.replaceText(\r\n      editorState.getCurrentContent(),\r\n      editorState.getSelection(),\r\n      htmlToDraft(value),\r\n      editorState.getCurrentInlineStyle()\r\n    );\r\n    onChange(EditorState.push(editorState, contentState, \"insert-characters\"));\r\n    this.setState({ showmodal: !this.state.showmodal });\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div onClick={this.addHTML}>ViewHTML</div>\r\n        <Modal\r\n          show={this.state.showmodal}\r\n          onHide={this.addHTML}\r\n          style={{ position: \"absolute\", maxWidth: \"100%\", width: \"100%\" }}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Modal heading</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <textarea\r\n              id=\"viewhtml\"\r\n              style={{ width: \"100%\", height: \"100%\" }}\r\n              value={draftToHtml(\r\n                convertToRaw(this.props.editorState.getCurrentContent())\r\n              )}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.addHTML}>\r\n              Close\r\n            </Button>\r\n            <Button\r\n              variant=\"primary\"\r\n              onClick={() => this.savechanges($(\"#viewhtml\").prop(\"value\"))}\r\n            >\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewSource;\r\n","import React, { Component } from \"react\";\r\nimport { EditorState } from \"draft-js\";\r\nimport { Editor } from \"react-draft-wysiwyg\";\r\nimport \"../../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\r\nimport ViewSource from \"./ViewSource\";\r\nexport class Draft extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorState: EditorState.createEmpty()\r\n    };\r\n  }\r\n  setEditorState = editorState => {\r\n    this.setState({ editorState });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Editor\r\n          editorState={this.state.editorState}\r\n          onEditorStateChange={this.setEditorState}\r\n          wrapperClassName=\"demo-wrapper\"\r\n          editorClassName=\"demo-editor\"\r\n          toolbarCustomButtons={[<ViewSource />]}\r\n        ></Editor>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Draft;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n// import RichEditor from \"./RichEditor\";\r\nimport Draft from \"./Draftjs Tutuorial/Draft\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Draft />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}